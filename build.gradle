plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'maven-publish'
}

group 'WildChests'
version = "2.1.0"

subprojects {
    apply plugin: 'java'
    apply plugin: 'com.github.johnrengelman.shadow'

    repositories {
        maven { url 'https://repo.bg-software.com/repository/nms/' }
        maven { url 'https://repo.bg-software.com/repository/common/' }
    }

    dependencies {
        compileOnly 'com.bgsoftware.common.reflection:ReflectionUtils:latest'
    }

    shadowJar {
        archiveFileName = "${project.name}.jar"
        destinationDirectory = file("../archive/")
    }

    build {
        dependsOn shadowJar
    }
}

repositories {
    maven { url 'https://repo.bg-software.com/repository/nms/' }
    maven { url 'https://repo.bg-software.com/repository/api/' }
    maven { url 'https://repo.bg-software.com/repository/public-libs/' }
    maven { url 'https://repo.bg-software.com/repository/common/' }

    String mavenUsername = project.hasProperty('mavenUsername') ? project.mavenUsername : System.getenv('mavenUsername');
    String mavenPassword = project.hasProperty('mavenPassword') ? project.mavenPassword : System.getenv('mavenPassword');

    if(mavenUsername != null && mavenPassword != null) {
        maven {
            url 'https://repo.bg-software.com/repository/private-libs/'
            credentials {
                username mavenUsername
                password mavenPassword
            }
        }
    }

}

dependencies {
    implementation fileTree("archive")
    implementation project(":API")

    implementation 'com.bgsoftware.common.reflection:ReflectionUtils:latest'

    // Spigot jars
    compileOnly "org.spigotmc:v1_8_R1:latest"
    compileOnly 'org.spigotmc:v1_16_R3-Tuinity:latest'

    // Plugin Hooks
    compileOnly "com.acrobot:ChestShop:latest"
    compileOnly "com.earth2me:Essentials-2.15:latest"
    compileOnly "su.fogus:FogusCore:latest"
    compileOnly "su.nightexpress:QuantumShop:latest"
    compileOnly "net.brcdev:ShopGUIPlus-1.43:latest"
    compileOnly "com.bgsoftware:SuperiorSkyblockAPI:latest"
    compileOnly "net.milkbowl:Vault:latest"
    compileOnly "com.bgsoftware:WildStackerAPI:latest"
    compileOnly "fr.maxlego08:zShop:latest"
}

jar {
    from {
        for (File file : new File("archive").listFiles()) {
            zipTree(file)
        }
    }
}

processResources {
    outputs.upToDateWhen {false}
    String versionNumber = System.getenv("BUILD_NUMBER") == null ? version + "-1.17" : version + "-1.17-DEVb" + System.getenv("BUILD_NUMBER")
    eachFile { details ->
        if (details.name.contentEquals('plugin.yml')) {
            filter { String line ->
                line.replace('${project.version}', versionNumber)
            }
        }
    }
}

shadowJar {
    dependsOn(jar)

    if(System.getenv("BUILD_NUMBER") == null){
        archiveName = rootProject.name + "-1.17.jar"
    }
    else{
        archiveName = rootProject.name + "-1.17-b" + System.getenv("BUILD_NUMBER") + ".jar"
    }

    delete fileTree('./target/') {
        exclude archiveName
    }

    destinationDir = file("./target/")
    from sourceSets.getByName("main").output
    configurations = [project.configurations.getByName("runtimeClasspath")]
}

task copyAPI(type: Copy) {
    from './archive/API.jar'
    into './target/'
    rename('API.jar', rootProject.name + 'API.jar')
}

clean {
    delete file('./archive/')
}

build {
    dependsOn shadowJar
    dependsOn copyAPI
    dependsOn clean
}

publish.shouldRunAfter shadowJar
shadowJar.shouldRunAfter build
build.shouldRunAfter subprojects.build